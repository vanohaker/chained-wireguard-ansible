---
- name: Install WireGuard
  apt:
    name: wireguard
    state: present
    update_cache: true

- name: Generate private and public keys for the client and server
  shell: umask 077; wg genkey | tee {{ item.private }} | wg pubkey > {{ item.public }}
  with_items:
    - { private: server_private_key, public: server_public_key }
    - { private: client_private_key, public: client_public_key }

- name: Register the key file contents
  command: cat {{ item }}
  register: key_files
  with_items:
    - server_private_key
    - server_public_key
    - client_private_key
    - client_public_key

- name: Assign the keys to their variables
  set_fact:
    server_private_key: "{{ key_files.results[0].stdout }}"
    server_public_key: "{{ key_files.results[1].stdout }}"
    client_private_key: "{{ key_files.results[2].stdout }}"
    client_public_key: "{{ key_files.results[3].stdout }}"

- name: Generate server config
  template:
    src: "templates/wg0-server.conf.j2"
    dest: "/etc/wireguard/wg0.conf"
    owner: root
    group: root
    mode: 0600


- name: make client gate config dir
  file:
    state: directory
    path: client

- name: Generate client config
  template:
    src: "templates/wg0-client.conf.j2"
    dest: "client/wg0.conf"
    owner: root
    group: root
    mode: 0600

- name: Enable and start WireGuard interface
  systemd:
    name: wg-quick@wg0
    enabled: yes
    state: started

- name: Enable IPv4 traffic forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

- name: Enable IPv4 forwarding continued
  command: echo 1 > /proc/sys/net/ipv4/ip_forward

- name: Add route table middleman
  lineinfile:
    path: /etc/iproute2/rt_tables
    line: '1 middleman'

- name: Set up firewall rules
  include: firewall.yaml

# - name: Reboot the server
#   shell: sleep 2 && shutdown -r now
#   async: 1
#   poll: 0
#   ignore_errors: true
